"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.load = void 0;
const fs = __importStar(require("fs"));
const jsonschema_1 = require("jsonschema");
const boom_1 = require("../util/boom");
const application_schema_json_1 = __importDefault(require("./application.schema.json"));
const contract_schema_json_1 = __importDefault(require("./contract.schema.json"));
function load(appJsonPath) {
    if (!fs.existsSync(appJsonPath))
        (0, boom_1.boom)(`Could not find application.json file at ${appJsonPath}`);
    const validator = new jsonschema_1.Validator();
    validator.addSchema(contract_schema_json_1.default, '/contract.schema.json');
    const file = JSON.parse(fs.readFileSync(appJsonPath, 'utf-8'));
    const result = validator.validate(file, application_schema_json_1.default);
    if (!result.valid)
        (0, boom_1.boom)(result.toString());
    return file;
}
exports.load = load;
//# sourceMappingURL=load.js.map