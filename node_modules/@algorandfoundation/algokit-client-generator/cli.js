"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cli = void 0;
const commander_1 = require("commander");
const load_1 = require("./schema/load");
const path = __importStar(require("path"));
const generate_1 = require("./client/generate");
const writer_1 = require("./output/writer");
const fs_1 = __importDefault(require("fs"));
const color_console_1 = require("./util/color-console");
function cli(workingDirectory, args) {
    const program = new commander_1.Command();
    program
        .command('generate')
        .description('Generates a TypeScript client for the given application.json file')
        .requiredOption('-a --application <path>', 'Specifies the application.json file')
        .requiredOption('-o --output <path>', 'Specifies the output file path')
        .action(({ application, output }) => {
        const resolvedAppJsonPath = path.resolve(workingDirectory, application);
        const resolvedOutPath = path.resolve(workingDirectory, output);
        const resolvedOutDir = path.dirname(resolvedOutPath);
        color_console_1.colorConsole.info `Reading application.json file from path ${resolvedAppJsonPath}`;
        const spec = (0, load_1.load)(resolvedAppJsonPath);
        color_console_1.colorConsole.info `Generating TS client for ${spec.contract.name}`;
        const parts = (0, generate_1.generate)(spec);
        if (!fs_1.default.existsSync(resolvedOutDir)) {
            color_console_1.colorConsole.warn `Output directory ${resolvedOutDir} does not exist and will be created.`;
            fs_1.default.mkdirSync(resolvedOutDir, { recursive: true });
        }
        color_console_1.colorConsole.info `Writing TS client to ${resolvedOutPath}`;
        const file = fs_1.default.createWriteStream(resolvedOutPath, {
            flags: 'w',
        });
        (0, writer_1.writeDocumentPartsToStream)(parts, file);
        color_console_1.colorConsole.success `Operation completed successfully`;
    })
        .configureOutput({
        writeErr(str) {
            color_console_1.colorConsole.error `${str}`;
        },
    });
    try {
        program.parse(args);
    }
    catch (err) {
        if (err instanceof Error) {
            color_console_1.colorConsole.error `Unhandled error: \n\n${err.stack}`;
        }
        else {
            color_console_1.colorConsole.error `Unhandled error: \n\n${err}`;
        }
        process.exit(-1);
    }
}
exports.cli = cli;
//# sourceMappingURL=cli.js.map