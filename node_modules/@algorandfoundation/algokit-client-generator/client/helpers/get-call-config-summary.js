"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCreateOnComplete = exports.getCallConfigSummary = exports.BARE_CALL = void 0;
const change_case_1 = require("change-case");
exports.BARE_CALL = Symbol('bare');
const getCallConfigSummary = (app) => {
    const result = {
        createMethods: [],
        callMethods: [],
        deleteMethods: [],
        updateMethods: [],
        optInMethods: [],
        closeOutMethods: [],
    };
    if (app.bare_call_config) {
        addToConfig(result, exports.BARE_CALL, app.bare_call_config);
    }
    if (app.hints) {
        for (const [method, hints] of Object.entries(app.hints)) {
            if (hints.call_config) {
                addToConfig(result, method, hints.call_config);
            }
        }
    }
    return result;
};
exports.getCallConfigSummary = getCallConfigSummary;
const getCreateOnComplete = (app, method) => {
    var _a, _b;
    const callConfig = method === exports.BARE_CALL ? app.bare_call_config : (_b = (_a = app.hints) === null || _a === void 0 ? void 0 : _a[method]) === null || _b === void 0 ? void 0 : _b.call_config;
    if (!callConfig) {
        return '';
    }
    const hasNoOp = callConfig.no_op === 'ALL' || callConfig.no_op === 'CREATE';
    return `{ onCompleteAction${hasNoOp ? '?' : ''}: ${getCreateOnCompleteTypes(callConfig)} }`;
};
exports.getCreateOnComplete = getCreateOnComplete;
const getCreateOnCompleteTypes = (config) => {
    return Object.keys(config)
        .map((oc) => oc)
        .filter((oc) => config[oc] === 'ALL' || config[oc] === 'CREATE')
        .map((oc) => `'${oc}' | OnApplicationComplete.${(0, change_case_1.pascalCase)(oc)}OC`)
        .join(' | ');
};
const addToConfig = (result, method, config) => {
    if (hasCall(config.no_op)) {
        result.callMethods.push(method);
    }
    if (hasCreate(config.no_op) ||
        hasCreate(config.opt_in) ||
        hasCreate(config.close_out) ||
        hasCreate(config.update_application) ||
        hasCreate(config.delete_application)) {
        result.createMethods.push(method);
    }
    if (hasCall(config.delete_application)) {
        result.deleteMethods.push(method);
    }
    if (hasCall(config.update_application)) {
        result.updateMethods.push(method);
    }
    if (hasCall(config.opt_in)) {
        result.optInMethods.push(method);
    }
    if (hasCall(config.close_out)) {
        result.closeOutMethods.push(method);
    }
};
const hasCall = (config) => {
    return config === 'CALL' || config === 'ALL';
};
const hasCreate = (config) => {
    return config === 'CREATE' || config === 'ALL';
};
//# sourceMappingURL=get-call-config-summary.js.map