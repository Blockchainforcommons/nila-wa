"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.composeMethod = void 0;
const writer_1 = require("../output/writer");
const algokit = __importStar(require("@algorandfoundation/algokit-utils"));
const sanitization_1 = require("../util/sanitization");
const get_call_config_summary_1 = require("./helpers/get-call-config-summary");
const deploy_types_1 = require("./deploy-types");
function* composeMethod(ctx) {
    const { name, callConfig } = ctx;
    yield `public compose(): ${name}Composer {`;
    yield writer_1.IncIndent;
    yield `const client = this`;
    yield `const atc = new AtomicTransactionComposer()`;
    yield `let promiseChain:Promise<unknown> = Promise.resolve()`;
    yield `const resultMappers: Array<undefined | ((x: any) => any)> = []`;
    yield `return {`;
    yield writer_1.IncIndent;
    yield* callComposerNoops(ctx);
    yield* callComposerOperationMethods(ctx, callConfig.updateMethods, 'update', true);
    yield* callComposerOperationMethods(ctx, callConfig.deleteMethods, 'delete');
    yield* callComposerOperationMethods(ctx, callConfig.optInMethods, 'optIn');
    yield* callComposerOperationMethods(ctx, callConfig.closeOutMethods, 'closeOut');
    yield* callComposerClearState();
    yield `addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {`;
    yield writer_1.IncIndent;
    yield 'promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ??' +
        ' client.sender)))';
    yield 'return this';
    yield writer_1.DecIndent;
    yield '},';
    yield `async atc() {`;
    yield writer_1.IncIndent;
    yield 'await promiseChain';
    yield 'return atc';
    yield writer_1.DecIndent;
    yield '},';
    yield `async execute() {`;
    yield writer_1.IncIndent;
    yield `await promiseChain`;
    yield `const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)`;
    yield `return {`;
    yield writer_1.IncIndent;
    yield `...result,`;
    yield `returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)`;
    yield writer_1.DecIndentAndCloseBlock;
    yield writer_1.DecIndentAndCloseBlock;
    yield writer_1.DecIndent;
    yield `} as unknown as ${name}Composer`;
    yield writer_1.DecIndentAndCloseBlock;
}
exports.composeMethod = composeMethod;
function* callComposerNoops({ app, callConfig, methodSignatureToUniqueName }) {
    var _a, _b, _c, _d;
    for (const method of app.contract.methods) {
        const methodSignature = algokit.getABIMethodSignature(method);
        const methodName = (0, sanitization_1.makeSafeMethodIdentifier)(methodSignatureToUniqueName[methodSignature]);
        // Skip methods which don't support a no_op call config
        if (!callConfig.callMethods.includes(methodSignature))
            continue;
        yield `${methodName}(args: MethodArgs<'${methodSignature}'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {`;
        yield writer_1.IncIndent;
        yield `promiseChain = promiseChain.then(() => client.${methodName}(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))`;
        const outputTypeName = (_d = (_c = (_b = (_a = app.hints) === null || _a === void 0 ? void 0 : _a[methodSignature]) === null || _b === void 0 ? void 0 : _b.structs) === null || _c === void 0 ? void 0 : _c.output) === null || _d === void 0 ? void 0 : _d.name;
        yield `resultMappers.push(${outputTypeName !== null && outputTypeName !== void 0 ? outputTypeName : 'undefined'})`;
        yield `return this`;
        yield writer_1.DecIndent;
        yield '},';
    }
}
function* callComposerClearState() {
    yield `clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {`;
    yield writer_1.IncIndent;
    yield `promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))`;
    yield `resultMappers.push(undefined)`;
    yield `return this`;
    yield writer_1.DecIndent;
    yield '},';
}
function* callComposerOperationMethods({ app, methodSignatureToUniqueName }, methods, verb, includeCompilation) {
    var _a, _b, _c, _d;
    if (methods.length) {
        yield `get ${verb}() {`;
        yield writer_1.IncIndent;
        yield `const $this = this`;
        yield `return {`;
        yield writer_1.IncIndent;
        for (const methodSig of methods) {
            const onComplete = verb === 'create' ? (0, deploy_types_1.getCreateOnCompleteOptions)(methodSig, app) : undefined;
            if (methodSig === get_call_config_summary_1.BARE_CALL) {
                yield `bare(args${(onComplete === null || onComplete === void 0 ? void 0 : onComplete.isOptional) !== false ? '?' : ''}: BareCallArgs & AppClientCallCoreParams ${includeCompilation ? '& AppClientCompilationParams ' : ''}& CoreAppCallArgs${(onComplete === null || onComplete === void 0 ? void 0 : onComplete.type) ? ` & ${onComplete.type}` : ''}) {`;
                yield writer_1.IncIndent;
                yield `promiseChain = promiseChain.then(() => client.${verb}.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))`;
                yield `resultMappers.push(undefined)`;
                yield `return $this`;
                yield writer_1.DecIndent;
                yield '},';
            }
            else {
                const uniqueName = methodSignatureToUniqueName[methodSig];
                const methodName = (0, sanitization_1.makeSafeMethodIdentifier)(uniqueName);
                yield `${methodName}(args: MethodArgs<'${methodSig}'>, params${(onComplete === null || onComplete === void 0 ? void 0 : onComplete.isOptional) !== false ? '?' : ''}: AppClientCallCoreParams${includeCompilation ? ' & AppClientCompilationParams' : ''}${(onComplete === null || onComplete === void 0 ? void 0 : onComplete.type) ? ` & ${onComplete.type}` : ''}) {`;
                yield writer_1.IncIndent;
                yield `promiseChain = promiseChain.then(() => client.${verb}.${methodName}(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))`;
                const outputTypeName = (_d = (_c = (_b = (_a = app.hints) === null || _a === void 0 ? void 0 : _a[methodSig]) === null || _b === void 0 ? void 0 : _b.structs) === null || _c === void 0 ? void 0 : _c.output) === null || _d === void 0 ? void 0 : _d.name;
                yield `resultMappers.push(${outputTypeName !== null && outputTypeName !== void 0 ? outputTypeName : 'undefined'})`;
                yield `return $this`;
                yield writer_1.DecIndent;
                yield '},';
            }
        }
        yield writer_1.DecIndentAndCloseBlock;
        yield writer_1.DecIndent;
        yield '},';
    }
}
//# sourceMappingURL=call-composer.js.map