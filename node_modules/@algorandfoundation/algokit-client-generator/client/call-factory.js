"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.callFactory = void 0;
const writer_1 = require("../output/writer");
const sanitization_1 = require("../util/sanitization");
const algokit = __importStar(require("@algorandfoundation/algokit-utils"));
const get_call_config_summary_1 = require("./helpers/get-call-config-summary");
const deploy_types_1 = require("./deploy-types");
function* callFactory(ctx) {
    yield* (0, writer_1.jsDoc)('Exposes methods for constructing all available smart contract calls');
    yield `export abstract class ${ctx.name}CallFactory {`;
    yield writer_1.IncIndent;
    yield* opMethods(ctx);
    for (const method of ctx.app.contract.methods) {
        yield* callFactoryMethod(ctx, method);
    }
    yield writer_1.DecIndent;
    yield '}';
}
exports.callFactory = callFactory;
function* opMethods(ctx) {
    const { app, callConfig } = ctx;
    yield* operationMethod(ctx, `Constructs a create call for the ${app.contract.name} smart contract`, callConfig.createMethods, 'create', true);
    yield* operationMethod(ctx, `Constructs an update call for the ${app.contract.name} smart contract`, callConfig.updateMethods, 'update', true);
    yield* operationMethod(ctx, `Constructs a delete call for the ${app.contract.name} smart contract`, callConfig.deleteMethods, 'delete');
    yield* operationMethod(ctx, `Constructs an opt in call for the ${app.contract.name} smart contract`, callConfig.optInMethods, 'optIn');
    yield* operationMethod(ctx, `Constructs a close out call for the ${app.contract.name} smart contract`, callConfig.closeOutMethods, 'closeOut');
}
function* operationMethod({ app, methodSignatureToUniqueName }, description, methods, verb, includeCompilation) {
    if (methods.length) {
        yield* (0, writer_1.jsDoc)(`Gets available ${verb} call factories`);
        yield `static get ${verb}() {`;
        yield writer_1.IncIndent;
        yield `return {`;
        yield writer_1.IncIndent;
        for (const methodSig of methods) {
            const onComplete = verb === 'create' ? (0, deploy_types_1.getCreateOnCompleteOptions)(methodSig, app) : undefined;
            if (methodSig === get_call_config_summary_1.BARE_CALL) {
                yield* (0, writer_1.jsDoc)({
                    description: `${description} using a bare call`,
                    params: {
                        params: `Any parameters for the call`,
                    },
                    returns: `A TypedCallParams object for the call`,
                });
                yield* factoryMethod({
                    isNested: true,
                    name: 'bare',
                    paramTypes: `BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs${includeCompilation ? ' & AppClientCompilationParams' : ''}${(onComplete === null || onComplete === void 0 ? void 0 : onComplete.type) ? ` & ${onComplete.type}` : ''}${(onComplete === null || onComplete === void 0 ? void 0 : onComplete.isOptional) !== false ? ' = {}' : ''}`,
                });
            }
            else {
                const method = app.contract.methods.find((m) => algokit.getABIMethodSignature(m) === methodSig);
                const uniqueName = methodSignatureToUniqueName[methodSig];
                yield* (0, writer_1.jsDoc)({
                    description: `${description} using the ${methodSig} ABI method`,
                    params: {
                        args: `Any args for the contract call`,
                        params: `Any additional parameters for the call`,
                    },
                    returns: `A TypedCallParams object for the call`,
                });
                yield* factoryMethod({
                    isNested: true,
                    name: (0, sanitization_1.makeSafeMethodIdentifier)(uniqueName),
                    signature: methodSig,
                    args: method.args,
                    paramTypes: `AppClientCallCoreParams & CoreAppCallArgs${includeCompilation ? ' & AppClientCompilationParams' : ''}${(onComplete === null || onComplete === void 0 ? void 0 : onComplete.type) ? ` & ${onComplete.type}` : ''}${(onComplete === null || onComplete === void 0 ? void 0 : onComplete.isOptional) !== false ? ' = {}' : ''}`,
                });
            }
        }
        yield writer_1.DecIndentAndCloseBlock;
        yield writer_1.DecIndentAndCloseBlock;
        yield writer_1.NewLine;
    }
}
function* callFactoryMethod({ methodSignatureToUniqueName, callConfig }, method) {
    const methodSignature = algokit.getABIMethodSignature(method);
    if (!callConfig.callMethods.includes(methodSignature))
        return;
    yield* (0, writer_1.jsDoc)({
        description: `Constructs a no op call for the ${methodSignature} ABI method`,
        abiDescription: method.desc,
        params: {
            args: `Any args for the contract call`,
            params: `Any additional parameters for the call`,
        },
        returns: `A TypedCallParams object for the call`,
    });
    yield* factoryMethod({
        isNested: false,
        name: (0, sanitization_1.makeSafeMethodIdentifier)(methodSignatureToUniqueName[methodSignature]),
        signature: methodSignature,
        args: method.args,
        paramTypes: 'AppClientCallCoreParams & CoreAppCallArgs',
    });
}
function* factoryMethod({ isNested, name, signature, args, paramTypes, }) {
    yield `${isNested ? '' : 'static '}${name}(${signature === undefined ? '' : `args: MethodArgs<'${signature}'>, `}params: ${paramTypes}) {`;
    yield writer_1.IncIndent;
    yield `return {`;
    yield writer_1.IncIndent;
    if (signature) {
        yield `method: '${signature}' as const,`;
        yield `methodArgs: Array.isArray(args) ? args : [${args
            .map((a) => ((0, sanitization_1.isSafeVariableIdentifier)(a.name) ? `args.${a.name}` : `args['${(0, sanitization_1.makeSafePropertyIdentifier)(a.name)}']`))
            .join(', ')}],`;
    }
    else {
        yield `method: undefined,`;
        yield `methodArgs: undefined,`;
    }
    yield '...params,';
    yield writer_1.DecIndent;
    yield '}';
    yield writer_1.DecIndent;
    yield `}${isNested ? ',' : ''}`;
}
//# sourceMappingURL=call-factory.js.map